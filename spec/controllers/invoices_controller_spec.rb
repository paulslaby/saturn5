require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe InvoicesController do
  let(:invoice) { create(:invoice, :with_line) }
  let(:user) { invoice.user }
  before { sign_in user }

  describe "GET #index" do
    it "assigns all invoices as @invoices" do
      get :index, {}
      expect(assigns(:invoices).to_a).to eq([invoice])
    end
  end

  describe "GET #show" do
    it "assigns the requested invoice as @invoice" do
      get :show, {:id => invoice.to_param}
      expect(assigns(:invoice)).to eq(invoice)
    end
  end

  describe "PUT #update" do
    it "assigns the requested invoice as @invoice and updates it" do
      patch :update, {:id => invoice.id, :invoice => { :lines_attributes => [{ id: invoice.lines.first.id, costs: 300 }] } }
      expect(assigns(:invoice).total_costs).to eq(300)
    end
  end

  describe "PUT #synchronize" do
    it "synchronizes invoices via api" do
      # patch :synchronize # TODO: stub request
      # expect(assigns(:invoices).count).to eq(2)
    end
  end
end
